#!/usr/bin/python

import os
import argparse
import string

from launcher.utilities.printer import Printer
from launcher.finder.finder import Finder
from launcher.runner import Runner

## Starting raiden launcher
## Defining application arguments
parser = argparse.ArgumentParser()
parser.add_argument("action", help="Define launcher action, can be start, stop, restart, delete")
parser.add_argument("-v", type=int, help="Define log level from 0 (debug) to 3 (error only), default 1 (info)")
parser.add_argument("--platform", help="Define the platform folder path")
parser.add_argument("--applications", help="Define the application folder path")
parser.add_argument("--targets", type=str, help="List of targeted containers. if not defined, command will target all containers")
arguments = parser.parse_args()

## setting the raiden root path
raiden_path = os.path.dirname(os.path.realpath(__file__))

finder = Finder()
platform = None
applications = None
targets = arguments.targets.split(',') if arguments.targets else None

## adding a filter to finder
if targets:
	finder.addFilter('name', targets)

## Setting global printer
printer = Printer()
if arguments.v != None:
	printer.level = arguments.v

## Checking if user want to override some paths
if arguments.platform:
	printer.debug("Raiden", "Platform path : " + arguments.platform)
	platform = finder.search(arguments.platform)
else:
	printer.debug("Raiden", "Platform path : " + raiden_path + "/platform")
	platform = finder.search(raiden_path + "/platform")

## Loading applications is not mandatory
if arguments.applications:
	printer.debug("Raiden", "Application path : " + arguments.applications)
	applications = finder.search(arguments.applications)

## Launch docker collections
## - First the applications
## - And then platform
## Applications are run first to be linked with platform

runner = Runner()

if not applications == None:
	runner.run(applications, arguments.action)

runner.run(platform, arguments.action)

printer.info("Raiden", "Done !")