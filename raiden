#!/usr/bin/python

import os
import argparse
import string

from launcher.utilities.printer import Printer
from launcher.finder.finder import Finder
from launcher.runner import Runner

## Starting raiden launcher
## Defining application arguments
parser = argparse.ArgumentParser()
parser.add_argument("action", help="Define launcher action, can be start, stop, restart, delete")
parser.add_argument("-v", type=int, help="Define log level from 0 (debug) to 3 (error only), default 1 (info)")
parser.add_argument("--pools", help="Define the container pool folder path")
parser.add_argument("--targets", type=str, help="List of targeted containers. if not defined, command will target all containers")
parser.add_argument("--env", type=str, help="Define environement to launch")
arguments = parser.parse_args()

## setting the raiden root path
raiden_path = os.path.dirname(os.path.realpath(__file__))

finder = Finder()
targets = arguments.targets.split(',') if arguments.targets else None
pools = arguments.pools.split(',') if arguments.pools else None

## adding a filter to finder
if targets:
	finder.addFilter('name', targets)

## Setting global printer
printer = Printer()
if arguments.v != None:
	printer.level = arguments.v

## well ... if we have no path to check ... we can't do anything
if not pools :
	printer.error("Raiden", "No path to check")
	exit(0)

## Checking platform path
printer.debug("Raiden", "Pools : " + str(pools))
containers = finder.search(pools)

runner = Runner(arguments.env)
if not runner.run(containers, arguments.action):
	printer.info("Raiden", "Done !")
else:
	printer.warning("Raiden", "There has been some errors during execution, your plateform can be unstable")
	exit(1)