#!/usr/bin/python

import os
import argparse
import string

from launcher.utilities.printer import Printer
from launcher.finder.finder import Finder
from launcher.runner import Runner
from launcher import Configuration

## Starting raiden launcher
## Defining application arguments
parser = argparse.ArgumentParser()
parser.add_argument("action", help="Define launcher action, can be run, stop, restart, clean, clean-image or rebuild")
parser.add_argument('images', nargs='*', help="List of targeted containers. if not defined, command will target all containers")
parser.add_argument("--verbose", "-v", type=int, help="Define log level from 0 (debug) to 3 (error only), default 1 (info)")
parser.add_argument("--pools", "-p", defautl=".", help="Define the container pool folder path")
parser.add_argument("--env", "-e", type=str, help="Define environement to launch")
parser.add_argument("--log-path", type=str, help="Define where log should be written. No logging if not define")
parser.add_argument("--log-level", type=str, help="Define log level")
parser.add_argument("--log-name", default="raiden", type=str, help="Define logname. default raiden")
parser.add_argument("--force", "-f", help="For non removable containers force to be deleted", action='store_true')
parser.add_argument("--configuration", "-c", default="/etc/raiden/conf.yml", help="Define configuration file location")
arguments = parser.parse_args()

## Setting global printer
printer = Printer()
if arguments.v != None:
	printer.level = arguments.v

configuration = Configuration(arguments)

## Checking if there's a configuration file
## default configuration file path is /etc/raiden/conf.yml
if os.path.isfile(configuration_file):
	printer.debug("Raiden", "Loading configuration file " + arguments.configuration)
	configuration.load(arguments.configuration)
else:
	printer.debug("Raiden", "No configuration file '" + arguments.configuration + "' to load")

finder = Finder()
targets = list(set(arguments.images)) if arguments.images else None
pools = list(set(arguments.pools.split(','))) if arguments.pools else '.'

## adding targets to filter for dependency resolving
finder.targets = targets

## Do printer need to log ?
if arguments.log_path:
	printer.setLogger(arguments.log_path + "/" + arguments.log_name + ".log", arguments.log_level)

## well ... if we have no path to check ... we can't do anything
if not pools :
	printer.error("Raiden", "No path to check")
	exit(0)

## Checking platform path
printer.debug("Raiden", "Pools : " + str(pools))
containers = finder.search(pools)

runner = Runner(arguments.env, arguments.force)
if not runner.run(containers, arguments.action):
	printer.info("Raiden", "Done !")
else:
	printer.warning("Raiden", "There has been some errors during execution, your plateform can be unstable")
	exit(1)